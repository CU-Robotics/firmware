#ifndef D200_H
#define D200_H

// Arduino library
#include <Arduino.h>

// development manual
// https://files.waveshare.com/upload/9/99/LD14P_Development_Manual.pdf

// specs
// https://www.waveshare.com/d200-lidar-kit.htm

/// @brief table of constants for computing CRC8 checksums
const uint8_t CRC_TABLE[256] = {
  0x00, 0x4d, 0x9a, 0xd7, 0x79, 0x34, 0xe3,
  0xae, 0xf2, 0xbf, 0x68, 0x25, 0x8b, 0xc6, 0x11, 0x5c, 0xa9, 0xe4, 0x33,
  0x7e, 0xd0, 0x9d, 0x4a, 0x07, 0x5b, 0x16, 0xc1, 0x8c, 0x22, 0x6f, 0xb8,
  0xf5, 0x1f, 0x52, 0x85, 0xc8, 0x66, 0x2b, 0xfc, 0xb1, 0xed, 0xa0, 0x77,
  0x3a, 0x94, 0xd9, 0x0e, 0x43, 0xb6, 0xfb, 0x2c, 0x61, 0xcf, 0x82, 0x55,
  0x18, 0x44, 0x09, 0xde, 0x93, 0x3d, 0x70, 0xa7, 0xea, 0x3e, 0x73, 0xa4,
  0xe9, 0x47, 0x0a, 0xdd, 0x90, 0xcc, 0x81, 0x56, 0x1b, 0xb5, 0xf8, 0x2f,
  0x62, 0x97, 0xda, 0x0d, 0x40, 0xee, 0xa3, 0x74, 0x39, 0x65, 0x28, 0xff,
  0xb2, 0x1c, 0x51, 0x86, 0xcb, 0x21, 0x6c, 0xbb, 0xf6, 0x58, 0x15, 0xc2,
  0x8f, 0xd3, 0x9e, 0x49, 0x04, 0xaa, 0xe7, 0x30, 0x7d, 0x88, 0xc5, 0x12,
  0x5f, 0xf1, 0xbc, 0x6b, 0x26, 0x7a, 0x37, 0xe0, 0xad, 0x03, 0x4e, 0x99,
  0xd4, 0x7c, 0x31, 0xe6, 0xab, 0x05, 0x48, 0x9f, 0xd2, 0x8e, 0xc3, 0x14,
  0x59, 0xf7, 0xba, 0x6d, 0x20, 0xd5, 0x98, 0x4f, 0x02, 0xac, 0xe1, 0x36,
  0x7b, 0x27, 0x6a, 0xbd, 0xf0, 0x5e, 0x13, 0xc4, 0x89, 0x63, 0x2e, 0xf9,
  0xb4, 0x1a, 0x57, 0x80, 0xcd, 0x91, 0xdc, 0x0b, 0x46, 0xe8, 0xa5, 0x72,
  0x3f, 0xca, 0x87, 0x50, 0x1d, 0xb3, 0xfe, 0x29, 0x64, 0x38, 0x75, 0xa2,
  0xef, 0x41, 0x0c, 0xdb, 0x96, 0x42, 0x0f, 0xd8, 0x95, 0x3b, 0x76, 0xa1,
  0xec, 0xb0, 0xfd, 0x2a, 0x67, 0xc9, 0x84, 0x53, 0x1e, 0xeb, 0xa6, 0x71,
  0x3c, 0x92, 0xdf, 0x08, 0x45, 0x19, 0x54, 0x83, 0xce, 0x60, 0x2d, 0xfa,
  0xb7, 0x5d, 0x10, 0xc7, 0x8a, 0x24, 0x69, 0xbe, 0xf3, 0xaf, 0xe2, 0x35,
  0x78, 0xd6, 0x9b, 0x4c, 0x01, 0xf4, 0xb9, 0x6e, 0x23, 0x8d, 0xc0, 0x17,
  0x5a, 0x06, 0x4b, 0x9c, 0xd1, 0x7f, 0x32, 0xe5, 0xa8
};

/// @brief serial port used by LiDAR
#define LIDAR_SERIAL Serial1

/// @brief baud rate of LiDAR module
#define LIDAR_BAUD 230400

/// @brief size of a LiDAR packet (bytes)
const int PACKET_SIZE = 47;
/// @brief number of points encoded in a single LiDAR packet
const int POINTS_PER_PACKET = 12;
/// @brief start character for a LiDAR packet
const int START_CHAR = 0x54;
/// @brief frame character for a LiDAR packet
const int FRAME_CHAR = 0x2c;
/// @brief length of LiDAR command (bytes)
const int CMD_LEN = 8;
/// @brief hard-coded start command for LiDAR
const uint8_t START_CMD[] = { 0x54, 0xa0, 0x04, 0, 0, 0, 0, 0x5e };
/// @brief hard-coded stop command for LiDAR
const uint8_t STOP_CMD[] = { 0x54, 0xa1, 0x04, 0, 0, 0, 0, 0x4a };
/// @brief default scanning speed (deg/s)
const uint16_t DEFAULT_SPEED = 6 * 360;
/// @brief minimum specified scanning speed (deg/s)
const uint16_t MIN_SPEED = 2 * 360 + 1;
/// @brief maximum specified scanning speed (deg/s)
const uint16_t MAX_SPEED = 8 * 360 - 1;

/// @brief struct for individual LiDAR packet
typedef struct {
  /// @brief current speed of LiDAR (deg/s)
  uint16_t lidar_speed;
  /// @brief start angle for measurements (0.01 deg)
  uint16_t start_angle;
  /// @brief distance and intensity measurements
  struct {
    /// @brief distance for point (mm)
    uint16_t distance;
    /// @brief signal strength for point (normalized)
    uint8_t intensity;
  } points[POINTS_PER_PACKET];
  /// @brief end angle for measurements (0.01 deg)
  uint16_t end_angle;
  /// @brief timestamp of start of measurements (ms, wraps after 30000)
  uint16_t timestamp;
} LidarDataPacket;

/// @brief state for LiDAR driver
typedef struct {
  /// @brief most recently read packet
  LidarDataPacket latest_packet;
  /// @brief buffer to assemble next packet
  uint8_t buffer[PACKET_SIZE];
  /// @brief current write index for buffer
  uint8_t buffer_idx;
} LidarState;

/// @brief class for LiDAR driver
class D200LD14P {
  private:
    LidarState state;

    /// @brief compute CRC8 checksum for buffer
    /// @param buf pointer to buffer
    /// @param len length of buffer
    /// @return CRC8 checksum for buffer
    uint8_t calc_checksum(uint8_t *buf, int len);

  public:
    /// @brief constructor and initialization
    D200LD14P();

    /// @brief set the speed of the LiDAR
    /// @param speed desired speed of LiDAR (deg/s)
    void set_speed(uint16_t speed);

    /// @brief start the LiDAR
    void start();

    /// @brief stop the LiDAR
    void stop();

    /// @brief read latest packet from LiDAR module
    void read();

    /// @brief get the latest packet
    /// @return the latest packet
    LidarDataPacket get_latest_packet();

    /// @brief print the latest packet for debugging purposes
    void print();
}

#endif // D200_H